plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.jetbrains.kotlin.jvm" version "1.6.10"
	id 'com.google.cloud.tools.jib' version '3.1.4'
}

group = 'green.seagull'
version = '0.2.0'
sourceCompatibility = '16'

repositories {
	mavenCentral()
}

def integrationTest = sourceSets.create('integrationTest')

configurations[integrationTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[integrationTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

def integrationTestTask = tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	useJUnitPlatform()

	testClassesDirs = integrationTest.output.classesDirs
	classpath = configurations[integrationTest.runtimeClasspathConfigurationName] + integrationTest.output

	shouldRunAfter(tasks.named('test'))
}

tasks.named('check') {
	dependsOn(integrationTestTask)
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.assertj:assertj-core:3.21.0'
	testImplementation 'org.mockito:mockito-core:4.1.0'
	testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'

	integrationTestImplementation project
}

tasks.named('test') {
	useJUnitPlatform()
}

jib {
	from {
		image = "arm64v8/openjdk"
		platforms {
			platform {
				architecture = 'arm64'
				os = 'linux'
			}
		}
	}
	to {
		image = "berrydockerregistry:5000/very-good-purchase:$version" // Local test registry
	}

	allowInsecureRegistries = true
	container {
		ports = ["8080"]
	}
}
